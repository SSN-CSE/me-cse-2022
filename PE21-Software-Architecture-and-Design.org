* 
:properties:
:author: K. Vallidevi
:date: 12 May 2022
:end:

#+startup: showall

# in the title of the subject, architectures (plural) or architecture
# (singular)?
{{{title-tab}}}
| CODE | COURSE TITLE                     | L | T | P | C |
|      | SOFTWARE ARCHITECTURE AND DESIGN | 3 | 0 | 0 | 3 |

** COURSE OBJECTIVES
- To understand the need, design approaches for software architecture to bridge the dynamic requirements and implementation.
- To learn the design principles and to apply for large scale systems. 
- To design architectures for distributed heterogeneous systems, environment through brokerage interaction.
- To build knowledge on service oriented and model driven architectures and the aspect oriented architecture. 
- To develop appropriate architectures for various Case studies like semantic web services, supply chain cloud services.

{{{unit}}}
|UNIT I|SOFTWARE ARCHITECTURE BASICS|9| 
Introduction to Software Architecture -- Bridging Requirements and
Implementation -- Design Guidelines : Software quality attributes --
Software Architecture Design Space; Agile Approach to Software
Architecture Design; Models for Software Architecture Description
Languages (ADL).

{{{unit}}}
|UNIT II|SOFTWARE ARCHITECTURE DESIGN PRINCIPLES|9| 
Object-Oriented Paradigm; Design Principles -- Data centered software
architecture -- Repository architecture -- Blackboard architecture;
Hierarchical Architecture -- Main-subroutine --Master-slave -- Layered
-- Virtual machine; Interaction Oriented Software Architectures:
Model-View-Controller (MVC), Presentation-Abstraction-Control (PAC).

{{{unit}}}
|UNIT III| DISTRIBUTED ARCHITECTURE AND ADAPTATION|9| 
Distributed Architecture: Client-Server, Middleware, Multi-tiers;
Broker Architecture: MOM -- CORBA -- Message Broker Architecture -
Service-Oriented Architecture (SOA): SOAP -- UDDI -- Grid/cloud
service computing; Heterogeneous Architecture: Methodology of
architecture decision, Quality attributes; Conceptual Framework For
Architectural Adaptation: Techniques for supporting architecture
centric change; The World Wide Web: A Case Study in Interoperability

{{{unit}}}
|UNIT IV|SOFTWARE PRODUCT LINE ARCHITECTURE|9| 
Architecture of User Interfaces Containers -- Case study -- Web
service; Product Line Architectures: Methodologies -- Processes and
tools; Software Reuse and Product Lines: Product line analysis --
Design and implementation -- Configuration models; Model Driven
Architectures (MDA): Why MDA -- Model transformation and software
architecture -- SOA and MDA -- Eclipse modelling framework.

{{{unit}}}
|UNIT V|ASPECT ORIENTED AND CLOUD ARCHITECTURE|9|
Aspect Oriented Architectures: AOP in UML -- AOP tools --
Architectural aspects and middleware selection of architectures;
Evaluation of Architecture Designs; Case Study: Online computer vendor
-- Order processing -- Manufacture & shipping - Inventory --
Supply chain cloud service management; Semantic Web Services.

\hfill *Total Periods: 45*

** COURSE OUTCOMES
After the completion of this course, students will be able to: 
1. Explain the need of software architecture to develop sustainable dynamic systems(K2)
2. Apply design principles to develop large scale systems(K3)
3. Apply design architectures to develop distributed heterogeneous systems (K3)
4. Explain various architectures such as service oriented, aspect oriented and model driven.(K2)
5. Select appropriate software architectures to design solution for various case studies.(K3)

** REFERENCES
1. Ion Gorton, ``Essentials of Software Architecture'',  Second Edition, Springer- verlag, 2011. (Unit 4), (Unit 5)
2. Kai Qian, ``Software Architecture Design Illuminated'', Jones and Bartlett Publishers, Canada, 2010.(Unit 1), (Unit 2)(Unit 3)
3. David Budgen, ``Software Design'', Second Edition, Pearson Education, 2020.
4. Len Bass, Paul Clements, Rick Kazman, ``Software Architecture in Practice'', Third Edition, Addison, Wesley, 2012.
5. Mary Shaw and David Garlan, ``Software Architecture Perspectives on an emerging discipline'', Pearson education, 2015.
6. Richard N. Taylor, Nenad Medvidovic and Eric M. Dashofy, ``Software Architecture, Foundations, Theory and Practice'', Wiley 2010.

** CO PO MAPPING 
#+NAME: co-po-mapping
|                |    |PO1 | PO2 | PO3 | PO4 |
|                |    | K3 | K6  |  K6 |  K6 |
| CO1            | K2 |    |     |  3  |   2 |
| CO2            | K3 |    |     |  3  |   2 | 
| CO3            | K3 |    |     |  3  |   3 | 
| CO4            | K2 |    |     |  3  |   3 |   
| CO5            | K3 |    |     |  3  |   3 |   
| Total          |    |    |     |  15 |  13 |   
| Course Mapping |    |    |     |  3  |  3  |   
