* 
:properties:
:author: R. Kanchana, R.S. Milton
:date: 26 Aprl 2022
:end:

#+startup: showall
{{{title-tab}}}
| CODE | COURSE TITLE                                | L | T | P | C |
|      | ADVANCED DATA STRUCTURES AND ALGORITHMS LAB | 3 | 0 | 0 | 3 |

** COURSE OBJECTIVES
- To learn advanced tree and graph structures.
- To learn the need for heap and disjoint set representations.
- To understand algorithm design techniques and apply suitable
  techniques for problems.

** SUGGESTED PROGRAMMING LANGUAGES
- C, Java or Python

** SUGGESTIVE EXERCISES
1. Insertion sort and merge sort with complexity analysis
2. Application of binary search trees 
3. Min heaps
4. Disjoint sets
5. Application of graph traversals -- BFS and DFS 
6. Single source Shortest Path Algorithms (e.g. Dijkstra's and Bellman
   Ford algorithms)  
7. All-pairs Shortest Path Algorithms: (e.g. Floyd's algorithm)
8. Dynamic programming (e.g. Longest common subsequence, 0/1 Knapsack)
9. Recursive backtracking (e.g. N-Queen's problem)
10. Greedy technique (e.g. Job/event scheduling, Minimum spanning tree)

 
\hfill *Total Periods: 45*

** COURSE OUTCOMES
After the completion of this course, students will be able to:
1. Solve problems using basic data structures and sorting algorithms. (K3)
2. Solve problems using tree and graph structures. (K3)
3. Analyse algorithm design techniques and develop efficient algorithms (K4)
